import gradio as gr
import requests
import json
from datetime import datetime
import time
import sys
from pathlib import Path

# Adiciona o diret√≥rio utils ao path
utils_dir = Path(__file__).parent.parent.parent / "utils"
sys.path.insert(0, str(utils_dir))

try:
    from logger import log_config, log_error, log_performance, log_api
except ImportError:
    # Fallback se o logger n√£o estiver dispon√≠vel
    def log_config(*args, **kwargs): pass
    def log_error(*args, **kwargs): pass
    def log_performance(*args, **kwargs): pass
    def log_api(*args, **kwargs): pass

# --- Constantes ---
API_BASE_URL = "http://localhost:8000"
CONFIG_FILE = "config.json"

def verificar_status_api():
    """Verifica o status da API backend."""
    try:
        response = requests.get(f"{API_BASE_URL}/health", timeout=5)
        if response.status_code == 200:
            return "üü¢ **API Online** - Conectado com sucesso", "success"
        else:
            return f"üü° **API com Problemas** - C√≥digo: {response.status_code}", "warning"
    except requests.exceptions.RequestException:
        return "üî¥ **API Offline** - N√£o foi poss√≠vel conectar", "error"

def carregar_configuracoes():
    """Carrega configura√ß√µes do arquivo JSON."""
    try:
        with open(CONFIG_FILE, 'r', encoding='utf-8') as f:
            config = json.load(f)
        return (
            config.get('api_url', API_BASE_URL),
            config.get('timeout', 60),
            config.get('max_results', 10),
            config.get('theme', 'soft'),
            config.get('auto_save', True)
        )
    except FileNotFoundError:
        # Configura√ß√µes padr√£o
        return API_BASE_URL, 60, 10, 'soft', True
    except Exception as e:
        return f"Erro ao carregar: {e}", 60, 10, 'soft', True

def salvar_configuracoes(api_url, timeout, max_results, theme, auto_save):
    """Salva configura√ß√µes no arquivo JSON."""
    try:
        # Carrega configura√ß√µes antigas para compara√ß√£o
        old_config = carregar_configuracoes()
        
        config = {
            'api_url': api_url,
            'timeout': int(timeout),
            'max_results': int(max_results),
            'theme': theme,
            'auto_save': auto_save,
            'last_updated': datetime.now().isoformat()
        }
        
        # Log das mudan√ßas
        if isinstance(old_config, tuple):
            old_config_dict = {
                'api_url': old_config[0],
                'timeout': old_config[1],
                'max_results': old_config[2],
                'theme': old_config[3],
                'auto_save': old_config[4]
            }
            
            for key, new_value in config.items():
                if key != "last_updated" and key in old_config_dict:
                    old_value = old_config_dict[key]
                    if old_value != new_value:
                        log_config(key, old_value, new_value)
        
        with open(CONFIG_FILE, 'w', encoding='utf-8') as f:
            json.dump(config, f, indent=2, ensure_ascii=False)
        
        return "‚úÖ Configura√ß√µes salvas com sucesso!"
    except Exception as e:
        error_msg = f"Erro ao salvar configura√ß√µes: {e}"
        log_error("Configura√ß√µes", error_msg, e)
        return f"‚ùå {error_msg}"

def resetar_configuracoes():
    """Reseta configura√ß√µes para os valores padr√£o."""
    try:
        config_padrao = {
            'api_url': API_BASE_URL,
            'timeout': 60,
            'max_results': 10,
            'theme': 'soft',
            'auto_save': True,
            'last_updated': datetime.now().isoformat()
        }
        
        with open(CONFIG_FILE, 'w', encoding='utf-8') as f:
            json.dump(config_padrao, f, indent=2, ensure_ascii=False)
        
        return (
            config_padrao['api_url'],
            config_padrao['timeout'],
            config_padrao['max_results'],
            config_padrao['theme'],
            config_padrao['auto_save'],
            "üîÑ Configura√ß√µes resetadas para os valores padr√£o!"
        )
    except Exception as e:
        return API_BASE_URL, 60, 10, 'soft', True, f"‚ùå Erro ao resetar: {e}"

def testar_conexao_api(api_url, timeout):
    """Testa a conex√£o com a API usando as configura√ß√µes fornecidas."""
    try:
        start_time = time.time()
        response = requests.get(f"{api_url}/health", timeout=int(timeout))
        response_time = time.time() - start_time
        
        # Log da requisi√ß√£o
        log_api("/health", "GET", response.status_code, response_time)
        
        if response.status_code == 200:
            return f"‚úÖ Conex√£o bem-sucedida!\n‚è±Ô∏è Tempo de resposta: {response_time:.3f}s\nüì° Status: {response.status_code}"
        else:
            return f"‚ö†Ô∏è API respondeu com status {response.status_code}\n‚è±Ô∏è Tempo: {response_time:.3f}s"
            
    except requests.exceptions.Timeout:
        log_error("Configura√ß√µes", "Timeout na conex√£o com API")
        return "‚è±Ô∏è Timeout: A API n√£o respondeu no tempo esperado"
    except requests.exceptions.ConnectionError:
        log_error("Configura√ß√µes", "Erro de conex√£o com API")
        return "‚ùå Erro de conex√£o: N√£o foi poss√≠vel conectar √† API"
    except Exception as e:
        error_msg = f"Erro inesperado ao testar API: {str(e)}"
        log_error("Configura√ß√µes", error_msg, e)
        return f"‚ùå Erro inesperado: {str(e)}"

def obter_info_sistema():
    """Obt√©m informa√ß√µes do sistema."""
    try:
        response = requests.get(f"{API_BASE_URL}/info", timeout=10)
        if response.status_code == 200:
            info = response.json()
            return f"""
            ### üìã Informa√ß√µes do Sistema
            
            **Vers√£o da API:** {info.get('version', 'N/A')}
            **Status:** {info.get('status', 'N/A')}
            **Uptime:** {info.get('uptime', 'N/A')}
            **Banco de Dados:** {info.get('database_status', 'N/A')}
            **√öltima Atualiza√ß√£o:** {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}
            """
        else:
            return "‚ùå N√£o foi poss√≠vel obter informa√ß√µes do sistema"
    except Exception as e:
        return f"‚ùå Erro ao obter informa√ß√µes: {e}"

# --- Interface da P√°gina de Configura√ß√µes ---
with gr.Blocks() as config_page:
    gr.Markdown("""
    ## ‚öôÔ∏è Configura√ß√µes do Sistema
    Configure par√¢metros da aplica√ß√£o e monitore o status da API.
    """)
    
    with gr.Tabs():
        with gr.TabItem("üîß Configura√ß√µes Gerais"):
            with gr.Row():
                with gr.Column(scale=2):
                    gr.Markdown("### Configura√ß√µes da API")
                    
                    api_url_input = gr.Textbox(
                        label="URL da API",
                        value=API_BASE_URL,
                        placeholder="http://localhost:8000"
                    )
                    
                    timeout_input = gr.Number(
                        label="Timeout (segundos)",
                        value=60,
                        minimum=5,
                        maximum=300
                    )
                    
                    max_results_input = gr.Number(
                        label="M√°ximo de Resultados",
                        value=10,
                        minimum=1,
                        maximum=50
                    )
                    
                with gr.Column(scale=1):
                    gr.Markdown("### Prefer√™ncias")
                    
                    theme_input = gr.Radio(
                        choices=["soft", "default", "monochrome"],
                        value="soft",
                        label="Tema da Interface"
                    )
                    
                    auto_save_input = gr.Checkbox(
                        label="Salvamento Autom√°tico",
                        value=True
                    )
            
            with gr.Row():
                carregar_config_btn = gr.Button("Carregar Configura√ß√µes", variant="secondary")
                salvar_config_btn = gr.Button("Salvar Configura√ß√µes", variant="primary")
                resetar_config_btn = gr.Button("Resetar Padr√µes", variant="stop")
            
            config_status = gr.Markdown("")
        
        with gr.TabItem("üîç Status e Testes"):
            with gr.Row():
                with gr.Column():
                    gr.Markdown("### Status da API")
                    verificar_status_btn = gr.Button("Verificar Status", variant="primary")
                    status_output = gr.Markdown("Clique para verificar o status da API")
                    
                    gr.Markdown("### Teste de Conex√£o")
                    testar_conexao_btn = gr.Button("Testar Conex√£o", variant="secondary")
                    teste_output = gr.Markdown("")
                
                with gr.Column():
                    gr.Markdown("### Informa√ß√µes do Sistema")
                    obter_info_btn = gr.Button("Obter Informa√ß√µes", variant="secondary")
                    info_output = gr.Markdown("Clique para obter informa√ß√µes do sistema")
        
        with gr.TabItem("üìö Ajuda"):
            gr.Markdown("""
            ### üÜò Guia de Configura√ß√£o
            
            #### Configura√ß√µes da API
            - **URL da API:** Endere√ßo onde o backend est√° rodando (padr√£o: http://localhost:8000)
            - **Timeout:** Tempo limite para requisi√ß√µes em segundos
            - **M√°ximo de Resultados:** N√∫mero m√°ximo de resultados retornados nas buscas
            
            #### Temas Dispon√≠veis
            - **Soft:** Interface suave e moderna (recomendado)
            - **Default:** Tema padr√£o do Gradio
            - **Monochrome:** Interface em tons de cinza
            
            #### Solu√ß√£o de Problemas
            
            **üî¥ API Offline:**
            1. Verifique se o backend est√° rodando
            2. Confirme a URL da API
            3. Verifique a conectividade de rede
            
            **‚è±Ô∏è Timeout:**
            1. Aumente o valor do timeout
            2. Verifique a performance do servidor
            3. Teste a conex√£o de rede
            
            **‚ùå Erro de Configura√ß√£o:**
            1. Use o bot√£o "Resetar Padr√µes"
            2. Verifique as permiss√µes de arquivo
            3. Reinicie a aplica√ß√£o
            """)
    
    # --- Eventos ---
    carregar_config_btn.click(
        fn=carregar_configuracoes,
        outputs=[api_url_input, timeout_input, max_results_input, theme_input, auto_save_input]
    )
    
    salvar_config_btn.click(
        fn=salvar_configuracoes,
        inputs=[api_url_input, timeout_input, max_results_input, theme_input, auto_save_input],
        outputs=[config_status]
    )
    
    resetar_config_btn.click(
        fn=resetar_configuracoes,
        outputs=[api_url_input, timeout_input, max_results_input, theme_input, auto_save_input, config_status]
    )
    
    verificar_status_btn.click(
        fn=lambda: verificar_status_api()[0],
        outputs=[status_output]
    )
    
    testar_conexao_btn.click(
        fn=testar_conexao_api,
        inputs=[api_url_input, timeout_input],
        outputs=[teste_output]
    )
    
    obter_info_btn.click(
        fn=obter_info_sistema,
        outputs=[info_output]
    )

def create_interface():
    """Retorna a interface da p√°gina de configura√ß√µes"""
    return config_page

if __name__ == "__main__":
    # Para testar esta p√°gina individualmente
    config_page.launch()