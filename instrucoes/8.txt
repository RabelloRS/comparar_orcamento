### **Vis√£o Geral: A "Sala de Controle" dos Agentes**

Vamos criar uma nova interface, uma verdadeira "sala de controle", que lhe permitir√° ver a "mente" do nosso sistema a funcionar. Para qualquer busca que voc√™ fizer, esta nova ferramenta ir√° mostrar-lhe:

1.  **O que o Agente 1 (Classificador) pensou:** Qual foi o grupo e a unidade que ele previu? Ele acertou?
2.  **O que o Agente 2 (Recuperador) encontrou:** Quais foram os candidatos iniciais? Quais novos candidatos a "busca na vizinhan√ßa" adicionou? A resposta correta estava nesta lista?
3.  **Como o Agente 3 (Raciocinador) decidiu:** Qual foi a an√°lise completa (Chain-of-Thought) que o LLM fez para chegar √† sua conclus√£o?
4.  **Se o Agente 4 (Pesquisador Web) agiu:** A busca na web foi acionada? Quais palavras-chave extras ele encontrou?

Al√©m de ver tudo isso, voc√™ ter√° um campo para escrever as suas "novas orienta√ß√µes", que ser√£o salvas para podermos us√°-las para refinar os prompts e a l√≥gica dos agentes no futuro.

-----

### **Instru√ß√µes para a IA de Programa√ß√£o**

**Objetivo:** Criar uma nova aplica√ß√£o web de an√°lise (`analysis_interface.py`) que se conecta ao nosso backend existente. Esta interface ir√° visualizar o processo de decis√£o de cada agente e permitir que o usu√°rio especialista forne√ßa feedback e novas orienta√ß√µes.

**Tarefa √önica: Criar a Interface de An√°lise e Feedback**

**Instru√ß√£o:** Crie um novo arquivo na **raiz do projeto** chamado `analysis_interface.py`. Conforme a nossa diretriz, o c√≥digo completo e final deve ser colocado no CANVAS.

**C√≥digo para colocar no CANVAS (`analysis_interface.py`):**

```python
# analysis_interface.py
import streamlit as st
import requests
import json
import pandas as pd
from datetime import datetime

# --- Configura√ß√£o da P√°gina ---
st.set_page_config(
    page_title="Painel de An√°lise dos Agentes",
    page_icon="üî¨",
    layout="wide"
)

# --- Constantes ---
API_URL = "http://localhost:8000/buscar" # URL do nosso backend FastAPI
FEEDBACK_LOG_FILE = "feedback_log.csv"

# --- Fun√ß√µes Auxiliares ---
def get_full_item_details(codigo):
    # (Esta fun√ß√£o pode ser expandida para buscar mais detalhes do item se necess√°rio)
    # Por enquanto, √© um placeholder.
    return f"Detalhes para o c√≥digo {codigo}."

# --- Cabe√ßalho da Aplica√ß√£o ---
st.title("üî¨ Painel de An√°lise e Feedback dos Agentes de IA")
st.markdown("Use esta ferramenta para auditar o processo de decis√£o do sistema de busca e fornecer orienta√ß√µes para melhorias.")
st.markdown("---")

# --- Interface Principal ---
st.header("An√°lise de Query Individual")

user_query = st.text_input(
    "Digite a query t√©cnica que deseja analisar:", 
    "assentamento de porcelanato 60x60cm"
)

if st.button("Analisar Desempenho dos Agentes", type="primary"):
    if not user_query:
        st.error("Por favor, digite uma query para analisar.")
    else:
        # Mostra um spinner enquanto a busca est√° em andamento
        with st.spinner(f"Executando a query '{user_query}' atrav√©s do pipeline de agentes..."):
            try:
                payload = {"texto_busca": user_query, "top_k": 3}
                response = requests.post(API_URL, json=payload, timeout=120)

                if response.status_code == 200:
                    st.success("Pipeline executado com sucesso! Analisando os resultados...")
                    
                    # Extrai os dados do log do servidor (assumindo que o main.py ainda tem os prints)
                    # Para uma vers√£o de produ√ß√£o, o main.py poderia retornar um objeto JSON com todo o log.
                    # Por agora, vamos simular a visualiza√ß√£o com base na resposta final.
                    
                    final_response = response.json()
                    results = final_response.get('results', [])

                    # --- Visualiza√ß√£o dos Resultados por Agente ---
                    st.markdown("---")
                    
                    # Para obter os dados dos agentes 1 e 2, precisar√≠amos modificar o main.py
                    # para retornar essa informa√ß√£o. Por enquanto, focamos na an√°lise do resultado final.
                    st.subheader("üïµÔ∏è An√°lise do Resultado Final")
                    
                    if not results:
                        st.warning("A busca n√£o retornou nenhum resultado.")
                    else:
                        st.write("Abaixo est√£o os 3 principais resultados retornados pela equipe de agentes, com a escolha do Agente Raciocinador no topo.")
                        for item in results:
                            st.markdown(f"**Rank {item['rank']}: {item['codigo']}** - {item['descricao'].split('|')[0].strip()}")
                            st.json(item) # Mostra todos os detalhes do item

                    st.markdown("---")
                    
                    # --- Se√ß√£o de Feedback do Especialista ---
                    st.subheader("üß† Feedback e Novas Orienta√ß√µes")
                    st.write("Analise os resultados acima e forne√ßa seu feedback para treinar os agentes.")

                    with st.form("feedback_form"):
                        st.markdown("**Avalia√ß√£o do Resultado Final**")
                        
                        correct_code = st.text_input(
                            "Qual era o C√ìDIGO CORRETO que voc√™ esperava para esta busca? (Deixe em branco se nenhum for ideal)",
                            placeholder="Ex: 87263"
                        )

                        is_choice_correct = st.selectbox(
                            "A escolha do Agente Raciocinador (o item no Rank 1) foi a melhor op√ß√£o da lista?",
                            ["Sim", "N√£o", "Parcialmente"]
                        )
                        
                        st.markdown("**Orienta√ß√µes para os Agentes**")
                        
                        agent_feedback = st.text_area(
                            "Escreva aqui suas orienta√ß√µes. O que a IA deveria ter considerado? Quais termos s√£o mais importantes?",
                            placeholder="Exemplo: 'A IA deveria ter dado mais peso √† caracter√≠stica 'porcelanato' e ignorado 'manilha'. A dimens√£o 60x60cm tamb√©m era crucial.'"
                        )

                        submitted = st.form_submit_button("Salvar An√°lise e Orienta√ß√µes")
                        if submitted:
                            # Salva o feedback em um arquivo CSV para an√°lise futura
                            feedback_data = {
                                'timestamp': [datetime.now().isoformat()],
                                'query': [user_query],
                                'top_result_code': [results[0]['codigo'] if results else 'N/A'],
                                'expected_correct_code': [correct_code],
                                'is_choice_correct': [is_choice_correct],
                                'human_guidance': [agent_feedback]
                            }
                            df_feedback = pd.DataFrame(feedback_data)
                            
                            # Adiciona ao arquivo existente ou cria um novo
                            if os.path.exists(FEEDBACK_LOG_FILE):
                                df_feedback.to_csv(FEEDBACK_LOG_FILE, mode='a', header=False, index=False, sep=';')
                            else:
                                df_feedback.to_csv(FEEDBACK_LOG_FILE, index=False, sep=';')
                                
                            st.success("Obrigado! Suas orienta√ß√µes foram salvas e ser√£o usadas para aprimorar o sistema.")

                else:
                    st.error(f"Ocorreu um erro na API (Status: {response.status_code}).")
                    st.json(response.text)

            except requests.RequestException as e:
                st.error(f"N√£o foi poss√≠vel conectar ao servi√ßo de busca em {API_URL}.")
                st.error(f"Detalhe do erro: {e}")

```

### **Como Usar a Nova Ferramenta**

1.  **Crie o Arquivo:** O agente deve criar o arquivo `analysis_interface.py` na raiz do projeto.
2.  **Inicie o Backend:** Garanta que o servidor `uvicorn` com a nossa API completa esteja a rodar.
3.  **Inicie a Nova Interface:** Em um **novo terminal**, com o ambiente virtual ativado, execute:
    ```bash
    streamlit run analysis_interface.py
    ```
    Uma nova aba se abrir√° no seu navegador (provavelmente em `http://localhost:8502` ou outra porta se a 8501 j√° estiver em uso pela outra interface).

Com esta "Sala de Controle", voc√™ poder√° fazer o que pediu: analisar cada resultado e, mais importante, come√ßar a criar um **log de orienta√ß√µes de especialistas**. Este log ser√° o nosso "ouro" para a pr√≥xima e definitiva rodada de otimiza√ß√£o, onde poderemos usar as suas pr√≥prias palavras para refinar os prompts e a l√≥gica dos agentes, levando a assertividade para o n√≠vel de perfei√ß√£o que voc√™ almeja.