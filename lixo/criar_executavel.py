#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script para criar execut√°vel da aplica√ß√£o de or√ßamento
Este script empacota a aplica√ß√£o completa em um execut√°vel standalone
"""

import os
import sys
import subprocess
import shutil
from pathlib import Path

def verificar_pyinstaller():
    """Verifica se PyInstaller est√° instalado"""
    try:
        import PyInstaller
        print("‚úÖ PyInstaller encontrado")
        return True
    except ImportError:
        print("‚ùå PyInstaller n√£o encontrado")
        print("Instalando PyInstaller...")
        try:
            subprocess.check_call([sys.executable, "-m", "pip", "install", "pyinstaller"])
            print("‚úÖ PyInstaller instalado com sucesso")
            return True
        except subprocess.CalledProcessError:
            print("‚ùå Erro ao instalar PyInstaller")
            return False

def criar_script_principal():
    """Cria o script principal que ser√° empacotado"""
    script_content = '''#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script principal do execut√°vel - Aplica√ß√£o de Or√ßamento
"""

import os
import sys
import time
import threading
import subprocess
import webbrowser
from pathlib import Path

# Adiciona o diret√≥rio da aplica√ß√£o ao path
app_dir = Path(__file__).parent
sys.path.insert(0, str(app_dir))
sys.path.insert(0, str(app_dir / "app"))

def iniciar_backend():
    """Inicia o servidor FastAPI"""
    try:
        import uvicorn
        from app.main import app
        
        print("üöÄ Iniciando servidor backend...")
        uvicorn.run(app, host="127.0.0.1", port=8000, log_level="info")
    except Exception as e:
        print(f"‚ùå Erro ao iniciar backend: {e}")
        input("Pressione Enter para sair...")
        sys.exit(1)

def iniciar_frontend():
    """Inicia a interface Streamlit"""
    try:
        time.sleep(3)  # Aguarda o backend iniciar
        
        # Comando para iniciar streamlit
        cmd = [sys.executable, "-m", "streamlit", "run", "interface.py", "--server.port=8501"]
        
        print("üé® Iniciando interface frontend...")
        subprocess.run(cmd, cwd=app_dir)
    except Exception as e:
        print(f"‚ùå Erro ao iniciar frontend: {e}")
        input("Pressione Enter para sair...")
        sys.exit(1)

def main():
    """Fun√ß√£o principal"""
    print("="*60)
    print("üèóÔ∏è  SISTEMA DE OR√áAMENTO - CONSTRU√á√ÉO CIVIL")
    print("="*60)
    print()
    
    # Verifica se os arquivos necess√°rios existem
    arquivos_necessarios = [
        "dados/banco_dados_servicos.txt",
        "interface.py",
        "app/main.py"
    ]
    
    for arquivo in arquivos_necessarios:
        if not (app_dir / arquivo).exists():
            print(f"‚ùå Arquivo necess√°rio n√£o encontrado: {arquivo}")
            input("Pressione Enter para sair...")
            sys.exit(1)
    
    print("‚úÖ Todos os arquivos necess√°rios encontrados")
    print()
    
    try:
        # Inicia o backend em uma thread separada
        backend_thread = threading.Thread(target=iniciar_backend, daemon=True)
        backend_thread.start()
        
        print("‚è≥ Aguardando backend inicializar...")
        time.sleep(5)
        
        # Abre o navegador automaticamente
        print("üåê Abrindo navegador...")
        webbrowser.open("http://localhost:8501")
        
        # Inicia o frontend (processo principal)
        iniciar_frontend()
        
    except KeyboardInterrupt:
        print("\nüëã Aplica√ß√£o encerrada pelo usu√°rio")
    except Exception as e:
        print(f"‚ùå Erro inesperado: {e}")
        input("Pressione Enter para sair...")

if __name__ == "__main__":
    main()
'''
    
    with open("app_principal.py", "w", encoding="utf-8") as f:
        f.write(script_content)
    
    print("‚úÖ Script principal criado: app_principal.py")

def criar_spec_file():
    """Cria o arquivo .spec para PyInstaller"""
    spec_content = '''# -*- mode: python ; coding: utf-8 -*-

block_cipher = None

a = Analysis(
    ['app_principal.py'],
    pathex=[],
    binaries=[],
    datas=[
        ('dados', 'dados'),
        ('app', 'app'),
        ('interface.py', '.'),
        ('requirements.txt', '.'),
    ],
    hiddenimports=[
        'streamlit',
        'uvicorn',
        'fastapi',
        'pandas',
        'torch',
        'sentence_transformers',
        'sklearn',
        'numpy',
        'requests',
        'openpyxl',
        'xlsxwriter',
    ],
    hookspath=[],
    hooksconfig={},
    runtime_hooks=[],
    excludes=[],
    win_no_prefer_redirects=False,
    win_private_assemblies=False,
    cipher=block_cipher,
    noarchive=False,
)

pyz = PYZ(a.pure, a.zipped_data, cipher=block_cipher)

exe = EXE(
    pyz,
    a.scripts,
    a.binaries,
    a.zipfiles,
    a.datas,
    [],
    name='SistemaOrcamento',
    debug=False,
    bootloader_ignore_signals=False,
    strip=False,
    upx=True,
    upx_exclude=[],
    runtime_tmpdir=None,
    console=True,
    disable_windowed_traceback=False,
    argv_emulation=False,
    target_arch=None,
    codesign_identity=None,
    entitlements_file=None,
    icon='icone.ico' if os.path.exists('icone.ico') else None,
)
'''
    
    with open("app.spec", "w", encoding="utf-8") as f:
        f.write(spec_content)
    
    print("‚úÖ Arquivo .spec criado: app.spec")

def criar_executavel():
    """Cria o execut√°vel usando PyInstaller"""
    print("üî® Criando execut√°vel...")
    print("‚ö†Ô∏è  Este processo pode demorar alguns minutos...")
    
    try:
        # Comando PyInstaller
        cmd = [
            sys.executable, "-m", "PyInstaller",
            "--clean",
            "--onefile",
            "--name=SistemaOrcamento",
            "--add-data=dados;dados",
            "--add-data=app;app",
            "--add-data=interface.py;.",
            "--hidden-import=streamlit",
            "--hidden-import=uvicorn",
            "--hidden-import=fastapi",
            "--hidden-import=pandas",
            "--hidden-import=torch",
            "--hidden-import=sentence_transformers",
            "--hidden-import=sklearn",
            "--hidden-import=numpy",
            "--hidden-import=requests",
            "--hidden-import=openpyxl",
            "--hidden-import=xlsxwriter",
            "app_principal.py"
        ]
        
        resultado = subprocess.run(cmd, capture_output=True, text=True)
        
        if resultado.returncode == 0:
            print("‚úÖ Execut√°vel criado com sucesso!")
            print("üìÅ Localiza√ß√£o: dist/SistemaOrcamento.exe")
            return True
        else:
            print("‚ùå Erro ao criar execut√°vel:")
            print(resultado.stderr)
            return False
            
    except Exception as e:
        print(f"‚ùå Erro inesperado: {e}")
        return False

def criar_readme_executavel():
    """Cria um README para o execut√°vel"""
    readme_content = '''# Sistema de Or√ßamento - Execut√°vel

## Como usar o execut√°vel

1. **Baixe o arquivo**: `SistemaOrcamento.exe`

2. **Execute**: Clique duas vezes no arquivo `.exe`

3. **Aguarde**: O sistema ir√°:
   - Inicializar o backend (API)
   - Abrir automaticamente o navegador
   - Carregar a interface web

4. **Use a aplica√ß√£o**: A interface estar√° dispon√≠vel em `http://localhost:8501`

## Requisitos do Sistema

- **Sistema Operacional**: Windows 10 ou superior
- **Mem√≥ria RAM**: M√≠nimo 4GB (recomendado 8GB)
- **Espa√ßo em Disco**: Aproximadamente 500MB livres
- **Conex√£o com Internet**: Necess√°ria para algumas funcionalidades

## Funcionalidades

- ‚úÖ **Busca Sem√¢ntica**: Pesquisa inteligente de servi√ßos
- ‚úÖ **Filtro em Tempo Real**: Busca r√°pida no banco de dados
- ‚úÖ **Processamento em Lote**: Upload e an√°lise de planilhas Excel
- ‚úÖ **Interface Intuitiva**: F√°cil de usar

## Solu√ß√£o de Problemas

### O execut√°vel n√£o inicia
- Verifique se tem permiss√µes de administrador
- Desative temporariamente o antiv√≠rus
- Execute como administrador

### Erro de "Porta em uso"
- Feche outras aplica√ß√µes que possam usar as portas 8000 ou 8501
- Reinicie o computador se necess√°rio

### Interface n√£o carrega
- Aguarde alguns segundos para o sistema inicializar completamente
- Verifique se o navegador n√£o est√° bloqueando localhost
- Tente acessar manualmente: http://localhost:8501

## Suporte

Em caso de problemas, verifique:
1. Se todos os arquivos est√£o na mesma pasta
2. Se tem conex√£o com internet
3. Se o Windows Defender n√£o est√° bloqueando

---
**Vers√£o**: 1.0  
**Data**: 2024
'''
    
    with open("README_EXECUTAVEL.md", "w", encoding="utf-8") as f:
        f.write(readme_content)
    
    print("‚úÖ README criado: README_EXECUTAVEL.md")

def main():
    """Fun√ß√£o principal"""
    print("üöÄ CRIADOR DE EXECUT√ÅVEL - Sistema de Or√ßamento")
    print("="*60)
    print()
    
    # Verifica se estamos no diret√≥rio correto
    if not os.path.exists("interface.py"):
        print("‚ùå Execute este script na pasta raiz do projeto")
        return
    
    # Verifica e instala PyInstaller
    if not verificar_pyinstaller():
        return
    
    print()
    print("üìã Preparando arquivos...")
    
    # Cria os arquivos necess√°rios
    criar_script_principal()
    criar_spec_file()
    criar_readme_executavel()
    
    print()
    resposta = input("ü§î Deseja criar o execut√°vel agora? (s/n): ")
    
    if resposta.lower() in ['s', 'sim', 'y', 'yes']:
        print()
        if criar_executavel():
            print()
            print("üéâ SUCESSO! Execut√°vel criado com sucesso!")
            print()
            print("üìÅ Arquivos gerados:")
            print("   - dist/SistemaOrcamento.exe (EXECUT√ÅVEL PRINCIPAL)")
            print("   - README_EXECUTAVEL.md (instru√ß√µes)")
            print()
            print("üí° Dicas:")
            print("   1. Teste o execut√°vel antes de distribuir")
            print("   2. Inclua o README junto com o execut√°vel")
            print("   3. O execut√°vel √© standalone (n√£o precisa de Python)")
            print()
        else:
            print("‚ùå Falha ao criar execut√°vel")
    else:
        print("‚ÑπÔ∏è  Arquivos preparados. Execute novamente quando quiser criar o execut√°vel.")

if __name__ == "__main__":
    main()